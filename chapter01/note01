1.1 信息就是bit + 上下文
1.2 程序被其他程序翻译成不同的格式


GNU（GNU not unix）  目标是开发一个完整的类unix系统；结果开发出了一个包含unix操作系统的所有主要部件的环境(EMACS编辑器、GCC编译器、GDB调试器、汇编器、链接器、处理二进制文件的工具)，但内核除外，内核是由linux项目独立发展而来。

1.3 了解编译系统是如何工作的大有益处
	• 优化程序性能：为了在c程序中作出好的编码选择，了解不同的c语句转化为机器代码的方式。switch语句和if-else的开销？函数调用的开销，while和for等
	• 理解链接器时出现的错误：构建大型程序时：无法解析一个引用？静态变量和全局变量的区别？静态库和动态库的区别？命令行上排列库顺序的影响？有些链接错误直到运行时才出现？
	• 避免安全漏洞：缓冲区溢出，堆栈原理

1.4 处理器读并解释存储在内存中的指令
	设备、设备驱动程序、设备控制器之间的关系
	CPU并不是系统中唯一的智能设备，每个物理设备都拥有自己的控制器。键盘、鼠标和串行口由一个高级I/O芯片统一管理，IDE控制器控制IDE硬盘而SCSI控制器控制SCSI硬盘等等。每个硬件控制器都有各自的控制状态寄存器（CSR）并且各不相同。例如Adaptec 2940 SCSI控制器的CSR与NCR 810 SCSI控制器完全不一样。这些寄存器用来启动、停止、初始化设备以及对设备进行诊断。在 Linux 中管理硬件设备控制器的代码并没有放置在每个应用程序中而是由内核统一管理，这些处理和管理硬件控制器的软件就是设备驱动程序。Linux 内核的设备管理是由一组运行在特权级上，驻留在内存以及对底层硬件进行处理的共享库的驱动程序来完成的。
	     设备管理的一个基本特征是设备处理的抽象性，即所有硬件设备都被看成普通文件，可以通过用操纵普通文件相同的系统调用来打开、关闭、读取和写入设备。系统中每个设备都用一种设备特殊文件来表示，例如系统中第一个IDE硬盘被表示成/dev/hda。
	
